Learn to wrap, unwrap, and check errors properly using:
fmt.Errorf("...: %w", err) for wrapping

errors.Is() to check if a specific error occurred

errors.As() to access the underlying custom error type


Step-by-Step Plan:
Step 1: Define a custom error

type ItemNotFound struct {
	Item string
}

func (e ItemNotFound) Error() string {
	return fmt.Sprintf("The item '%s' was not found", e.Item)
}
 

Step 2: Simulate a lookup function that wraps an error
func LookupItem(name string) error {
	if name != "Bread" {
		return fmt.Errorf("lookup failed: %w", ItemNotFound{Item: name})
	}
	return nil
}


Step 3: Use errors.Is() and errors.As() in the caller

func HandleLookup(name string) {
	err := LookupItem(name)
	if err != nil {
		// Check by type
		var notFound ItemNotFound
		if errors.As(err, &notFound) {
			fmt.Println("Custom handler for not found:", notFound.Item)
			return
		}

		// Check by value
		if errors.Is(err, ItemNotFound{Item: name}) {
			fmt.Println("Item not found (matched by value)")
			return
		}

		// Generic error fallback
		fmt.Println("General error:", err)
	} else {
		fmt.Println("Item found:", name)
	}
}


Why use wrapping, unwrapping, `errors.Is()` and `errors.As()`?

These are powerful tools in Go for advanced error handling 
when you’re building larger applications or libraries.



Real-World Use Cases

 1. Layered Error Context (e.g., API or DB systems)

Suppose a request goes through:

 Authentication → DB lookup → Business logic → Response

If the DB lookup fails, you can wrap that error with more context at each layer.


err := db.LookupUser("Tami")
if err != nil {
	return fmt.Errorf("auth failed: %w", err)
}


Later on, you can inspect the original cause (like `UserNotFound`) even after it’s been wrapped several times.

 2. Custom Action Based on Error Type

Let’s say:

 You want to retry if the error is a `TimeoutError`
 But alert support if it’s a `DBCorruptionError`

Using `errors.As()`, you can write logic that depends on the specific type:

var timeout TimeoutError
if errors.As(err, &timeout) {
	retry()
}

 3. Logging or UI Messages

You can unwrap and log different errors:

 "Item not found"
 "Internal server error"
 "Network timeout"

Each one gets a clean user-facing message but still carries the full context under the hood for debugging.


 Summary

| Feature                | Use It When...                                              |
| ---------------------- | ----------------------------------------------------------- |
| `fmt.Errorf(...%w...)` | You want to add context while preserving original error |
| `errors.Is()`          | You want to check for specific errors up the chain      |
| `errors.As()`          | You want to extract and act on custom error data        |
