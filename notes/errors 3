Awesome! Letâ€™s build on custom and generic error handling by adding more real-world scenarios.
 Hereâ€™s what weâ€™ll cover next in sequence:

 âœ… 1. Multiple Custom Error Types

 âœ… 2. Error Wrapping (`fmt.Errorf` with `%w`)

This is useful when one error causes another (e.g. file open failure due to permission denied).

 âœ… 3. Practical Example: User Registration with error validation (age, email, username, password strength).

---

 ðŸ”¹ Step 1: Multiple Custom Errors

 ðŸ‘‡ Define multiple error types:


type ValidationError struct {
	Field   string
	Message string
}


type ServerError struct {
	Code    int
	Message string
}

func (v ValidationError) Error() string {
	return fmt.Sprintf("Invalid field [%s]: %s", v.Field, v.Message)
}

func (s ServerError) Error() string {
	return fmt.Sprintf("Server error %d: %s", s.Code, s.Message)
}


 ðŸ”¹ Step 2: Use `error` Type Assertion with Switch

func HandleError(err error) {
	switch e := err.(type) {
	case ValidationError:
		fmt.Println("Validation issue:", e)
	case ServerError:
		fmt.Println("Server issue:", e)
	default:
		fmt.Println("Generic issue:", err)
	}
}

ðŸ”¹ Step 3: Simulate a Registration


func RegisterUser(username, email string, age int) error {
	if username == "" {
		return ValidationError{"username", "cannot be empty"}
	}
	if !strings.Contains(email, "@") {
		return ValidationError{"email", "must be a valid email"}
	}
	if age < 18 {
		return ValidationError{"age", "must be 18 or older"}
	}
	if username == "admin" {
		return ServerError{500, "username 'admin' is reserved"}
	}
	return nil
}


And in  `main()`:

err := RegisterUser("admin", "tamigmail.com", 17)
if err != nil {
	HandleError(err)
} else {
	fmt.Println("Registration successful")
}
